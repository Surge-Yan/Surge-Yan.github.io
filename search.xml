<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>geminiCLI登录报错解决</title>
      <link href="/2025/09/28/geminiCLI%E7%99%BB%E5%BD%95%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
      <url>/2025/09/28/geminiCLI%E7%99%BB%E5%BD%95%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Gemini-CLI-登录报错解决方案"><a href="#Gemini-CLI-登录报错解决方案" class="headerlink" title="Gemini CLI 登录报错解决方案"></a>Gemini CLI 登录报错解决方案</h1><p>Gemini CLI 是一个强大的命令行工具，允许开发者直接在终端与 Gemini 模型进行交互。然而，在初次配置和登录过程中，一些用户可能会遇到特定的报错，导致无法成功登录。本文综合了网络上的解决方案，旨在帮助您快速解决 Gemini CLI 的登录问题。</p><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><p>在尝试登录 Gemini CLI 时，您可能会遇到以下两种主要的错误信息：</p><ol><li><strong>“Invalid URL” 错误</strong>: 这通常是由于网络问题或代理设置不正确导致的。</li><li><strong>“GOOGLE_CLOUD_PROJECT must be set” 错误</strong>: 这个错误明确指出您需要设置一个 Google Cloud 项目 ID 作为环境变量。</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>要解决以上问题，请按照以下步骤操作：</p><h3 id="1-配置网络代理"><a href="#1-配置网络代理" class="headerlink" title="1. 配置网络代理"></a>1. 配置网络代理</h3><p>Gemini CLI 的登录和使用需要访问 Google 的服务，因此通常需要一个稳定可靠的网络代理。</p><p><strong>a. 开启全局代理</strong></p><p>首先，请确保您的代理工具已经开启，并且设置为全局模式（或 TUN 模式），以确保命令行流量可以被正确代理。</p><p><strong>b. 设置 <code>http_proxy</code> 环境变量</strong></p><p>接下来，您需要在终端中设置 <code>http_proxy</code> 环境变量，将您的代理地址和端口配置好。请根据您使用的终端执行相应的命令（假设您的代理端口为 <code>7897</code>，请替换为您的<strong>实际端口</strong>）：</p><ul><li><p><strong>CMD</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:7897</span><br></pre></td></tr></table></figure></li><li><p><strong>PowerShell</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">env</span>:http_proxy=<span class="string">&quot;http://127.0.0.1:7897&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>Bash&#x2F;Zsh</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:7897</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>提示</strong>: 在 Windows 系统上，推荐使用 PowerShell，因为 CMD 在执行某些命令时可能会出现无响应的情况。</p></blockquote><h3 id="2-设置-Google-Cloud-项目"><a href="#2-设置-Google-Cloud-项目" class="headerlink" title="2. 设置 Google Cloud 项目"></a>2. 设置 Google Cloud 项目</h3><p>Gemini CLI 需要关联一个 Google Cloud 项目才能正常工作。</p><p><strong>a. 获取项目 ID</strong></p><p>登录 <a href="https://console.cloud.google.com/">Google Cloud Console</a>。您可以选择一个现有的项目或创建一个新项目。进入项目后，在项目信息仪表板中找到并复制您的<strong>项目 ID</strong>。</p><p><strong>b. 设置 <code>GOOGLE_CLOUD_PROJECT</code> 环境变量</strong></p><p>获取项目 ID 后，使用以下命令将其设置为环境变量：</p><ul><li><p><strong>CMD</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set GOOGLE_CLOUD_PROJECT=your-project-id</span><br></pre></td></tr></table></figure></li><li><p><strong>PowerShell</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">env</span>:GOOGLE_CLOUD_PROJECT=<span class="string">&quot;your-project-id&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>Bash&#x2F;Zsh</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOOGLE_CLOUD_PROJECT=your-project-id</span><br></pre></td></tr></table></figure></li></ul><p>请将 <code>your-project-id</code> 替换为您真实的 Google Cloud 项目 ID。</p><h3 id="3-启用-Gemini-API"><a href="#3-启用-Gemini-API" class="headerlink" title="3. 启用 Gemini API"></a>3. 启用 Gemini API</h3><p>确保您的 Google Cloud 项目已经启用了 Gemini 相关的 API 服务。</p><ol><li><p>在 Google Cloud Console 中，使用顶部的搜索栏搜索 “Gemini for Google Cloud” 或类似的 AI&#x2F;ML API。</p></li><li><p>进入 API 管理页面，如果该 API 尚未启用，请点击“启用”按钮。</p><p>![Screenshot 2025-08-23 114707](C:\Users\ybf32\Pictures\Screenshots\Screenshot 2025-08-23 114707.png)</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成以上三个步骤后，您应该可以成功登录 Gemini CLI。总结一下关键点：</p><ol><li><strong>开启全局代理</strong> 并 <strong>设置 <code>http_proxy</code> 环境变量</strong>。</li><li>从 Google Cloud Console 获取项目 ID 并 <strong>设置 <code>GOOGLE_CLOUD_PROJECT</code> 环境变量</strong>。</li><li>确保项目中已 <strong>启用 Gemini API</strong>。</li></ol><p>现在，重新运行 <code>gemini login</code> 命令，您应该可以顺利完成登录流程了。</p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://kxnotes.com/gemini-cli-failed-to-login/">https://kxnotes.com/gemini-cli-failed-to-login/</a></li><li><a href="https://www.cnblogs.com/LkpLoveProgramming/p/18967259">https://www.cnblogs.com/LkpLoveProgramming/p/18967259</a></li><li><a href="https://zhuanlan.zhihu.com/p/1922229420644634797">https://zhuanlan.zhihu.com/p/1922229420644634797</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术笔记/AI工具/Google Gemini </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gemini </tag>
            
            <tag> AI工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改npm全局安装位置</title>
      <link href="/2025/09/28/%E4%BF%AE%E6%94%B9npm%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/"/>
      <url>/2025/09/28/%E4%BF%AE%E6%94%B9npm%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="修改-npm-的默认全局安装位置为-D-盘而不是-C-盘"><a href="#修改-npm-的默认全局安装位置为-D-盘而不是-C-盘" class="headerlink" title="修改 npm 的默认全局安装位置为 D 盘而不是 C 盘"></a>修改 npm 的默认全局安装位置为 D 盘而不是 C 盘</h1><blockquote><p>一篇面向 Windows 用户的超细避坑指南：路径迁移、权限修复与验证全流程</p></blockquote><h2 id="背景：为什么要把-npm-全局目录搬离-C-盘？"><a href="#背景：为什么要把-npm-全局目录搬离-C-盘？" class="headerlink" title="背景：为什么要把 npm 全局目录搬离 C 盘？"></a>背景：为什么要把 npm 全局目录搬离 C 盘？</h2><ul><li>C 盘空间日渐告急，而 npm 全局包 + 缓存动辄上 GB。  </li><li>重装系统时想保留已装工具，独立磁盘更方便。  </li><li>团队&#x2F;公司电脑权限受限，D 盘通常更容易写入。</li></ul><hr><h2 id="步骤-1：规划新目录"><a href="#步骤-1：规划新目录" class="headerlink" title="步骤 1：规划新目录"></a>步骤 1：规划新目录</h2><p>在 <strong>D 盘</strong> 新建两个空文件夹（名字可自定义，但需保持一致）：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\nodejs\npm_global   # 全局包安装位置</span><br><span class="line">D:\nodejs\npm_cache    # 全局缓存位置</span><br></pre></td></tr></table></figure><h2 id="步骤-2：修改-npm-配置"><a href="#步骤-2：修改-npm-配置" class="headerlink" title="步骤 2：修改 npm 配置"></a>步骤 2：修改 npm 配置</h2><p>运行cmd:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;D:\nodejs\npm_global&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache  &quot;D:\nodejs\npm_cache&quot;</span><br></pre></td></tr></table></figure><h2 id="步骤-3：把新目录加入系统-用户-PATH"><a href="#步骤-3：把新目录加入系统-用户-PATH" class="headerlink" title="步骤 3：把新目录加入系统&#x2F;用户 PATH"></a>步骤 3：把新目录加入系统&#x2F;用户 PATH</h2><ol><li><p><code>Win + S</code> → <strong>“编辑系统环境变量”</strong> → <strong>“环境变量”</strong>。</p></li><li><p>在 <strong>用户变量</strong>（或系统变量）里找到 <code>Path</code>。</p></li><li><p><strong>新增一条</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\nodejs\npm_global</span><br></pre></td></tr></table></figure></li><li><p>确认：重启CMD</p><blockquote><p>注意</p><ul><li>不要手动加 <code>\bin</code>；Windows 版 npm 会自动把可执行文件放在 <code>npm_global</code> 根目录。</li></ul></blockquote></li></ol><h2 id="步骤-4：验证迁移是否成功"><a href="#步骤-4：验证迁移是否成功" class="headerlink" title="步骤 4：验证迁移是否成功"></a>步骤 4：验证迁移是否成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">npm config get prefix</span><br><span class="line">npm config get cache</span><br></pre></td></tr></table></figure><p>应显示版本号，命令均应指向 <strong>D 盘</strong> 路径。</p><h2 id="步骤-5：解决常见权限错误（EPERM）"><a href="#步骤-5：解决常见权限错误（EPERM）" class="headerlink" title="步骤 5：解决常见权限错误（EPERM）"></a>步骤 5：解决常见权限错误（EPERM）</h2><p>安装全局包时若出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm error code EPERM</span><br><span class="line">npm error syscall mkdir</span><br><span class="line">npm error path D:\nodejs\npm_cache\_cacache</span><br></pre></td></tr></table></figure><p>按以下顺序一次性修复：</p><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>以管理员身份打开 CMD</td><td><code>Win</code> → 输入 <code>cmd</code> → 右键“以管理员身份运行”</td></tr><tr><td>赋权</td><td><code>icacls &quot;D:\nodejs\npm_cache&quot; /grant &quot;%USERNAME%&quot;:F /T</code></td></tr><tr><td>清理旧缓存</td><td><code>rd /s /q &quot;D:\nodejs\npm_cache&quot;</code></td></tr><tr><td>重建缓存</td><td><code>npm cache verify</code></td></tr></tbody></table><h2 id="Node-js-和-npm-是什么？有什么关系？"><a href="#Node-js-和-npm-是什么？有什么关系？" class="headerlink" title="Node.js 和 npm 是什么？有什么关系？"></a>Node.js 和 npm 是什么？有什么关系？</h2><table><thead><tr><th>名称</th><th>是什么</th><th>关系说明</th></tr></thead><tbody><tr><td><strong>Node.js</strong></td><td>一个基于 Chrome V8 引擎的 JavaScript <strong>运行时环境</strong>，让你能在服务器端运行 JS 代码。</td><td>像“发动机”</td></tr><tr><td><strong>npm</strong></td><td>Node.js 自带的 <strong>包管理器</strong>，用来安装、卸载、管理第三方模块（包）。</td><td>像“加油站”或“工具箱”</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术笔记/环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
